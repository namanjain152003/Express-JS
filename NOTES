EXPRESS JS:

express js is a javascript framework that is used to create backend.

node js is the run time environment which helps to run javascript on any computer

node js + express = backend
it helps to:
1. increase readability
2. less code
3. can add middlewares

express js is very popular now

STEPS TO CREATE EXPRESS SERVER
1. open directory in which u have to work.
2. create index.js in that directory
3. open terminal and create package.json (npm init -y)
4. install express npm (npm i express)
5. now u can work


localhost : when we dont have server on internet but we have to host our server locally . making our own computer as the server of our backend
e.g https://localhost:3000



port is like a door to enter our local system server
3000 is port here

press cntrl + c to stop the server in the terminal 

netsat-ano|findstr"LISTENING" is used to check which ports in the system are listening for windows 

" netstat -tulnp | grep LISTEN " is used to check on github 


 HTTP request

hypertext transfer protocol
it is used to make connection between client and server


Request Vocab:
Get : request resource from server.
Post : Sending the resource to the server.
Put : Replace resource (it completely replace the resource)
Patch : patch up a resource(it only corrects the error part of the resource)
Delete : delete the resource

we can install nodemon which help in detect changes in the server and apply it without clsoing and restarting it
npm i -g nodemon (-g because we download it globally)

Express is used so that when a client performs some action, the client gets a proper result or message in return.
Correct! Express handles requests from the client and sends back appropriate responses.


server send http response status codes:
it has 5 classes:
informational responses (100-199)
successful responses (200-299)
redirection messages(300-399)
client error responses(400-499)
server error responses(500 - 599)

cheat code to remember:
1** hold on
2** here you go
3** Go Away
4** you fucked up
5** i fucked up

we can use postman to see wheather we are getting the right status code for our requets
(i used vscode to test postman beacuse using in github codespace is bit tricky)


middlewares:-
Middleware is software that acts as a bridge, enabling communication and data management between different applications, operating systems, and databases. helps in pre processing before getting the requests into the routs.

public folder is where static files are stored and which are not need to change.

res.sendFile is used to send the files from server to client.

body parser is the example of middleware in express js, which helps to read the body data in the express because express cant read the body directly.


Basic Structure of a Custom Middleware

function middlewareName(req, res, next) {
  // 1. You can read or modify the req/res objects
  // 2. Do something (e.g., logging, auth check, etc.)
  // 3. Call next() to move to the next middleware/route
}

ðŸ”„ Middleware Flow
When a request comes in:

Express checks any middleware registered with app.use() or specific routes.

It runs each middleware in order.

If the middleware calls next(), the request moves to the next one.

If next() is not called, the request hangs.





